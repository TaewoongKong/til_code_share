{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install pandas\n",
    "#pip install numpy\n",
    "#pip install sklearn\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics.pairwise import cosine_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rel = pd.read_csv(\"answer_rel.csv\")\n",
    "place = pd.read_csv(\"place.csv\")\n",
    "user = pd.read_csv(\"user.csv\")\n",
    "ask = pd.read_csv('ask.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "place_vec = rel.pivot_table(index = 'user_id', columns = 'place_id', values='id', aggfunc='count')\n",
    "place_vec = place_vec.fillna(0)\n",
    "\n",
    "\n",
    "from tqdm import tqdm_notebook\n",
    "\n",
    "for i in tqdm_notebook(range(place_vec.shape[0])):\n",
    "    for c in range(place_vec.shape[1]):\n",
    "        if place_vec.iloc[i,c] > 0:\n",
    "            place_vec.iloc[i,c] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "drop_index_list = []\n",
    "for i in place_vec.index:\n",
    "    if np.sum(place_vec.loc[place_vec.index==i].values) < 8:\n",
    "        drop_index_list.append(i)\n",
    "        \n",
    "        \n",
    "place_vec = place_vec.drop(index=drop_index_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "place_taste = cosine_similarity(place_vec, place_vec) \n",
    "place_taste_sorted_ind = place_taste.argsort()[:, ::-1] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def find_simi_user_final(rel_df, place_df, user_df, place_vec, sorted_ind, user_name, top_n):\n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    # 찾고자 한 유저의 id를 뽑는다\n",
    "    real_user_id = user_df.loc[user_df['name'] == user_name, 'id'].values[0]\n",
    "    \n",
    "    \n",
    "    # 유저 id를 place_vec 상의 id로 전환한다\n",
    "    place_vec_reset_index = place_vec.reset_index()\n",
    "    vec_user_id = place_vec_reset_index.loc[place_vec_reset_index['user_id'] == real_user_id].index.values[0]\n",
    "\n",
    "    \n",
    "    # 유저 id와 가장 유사한 장소를 고른 사람을 뽑는다\n",
    "    \n",
    "    similar_indexes = sorted_ind[vec_user_id, 1:(top_n + 1)]\n",
    "    #similar_indexes = similar_indexes.reshape(-1)\n",
    "    \n",
    "    \n",
    "    # 추출한 가장 비슷한 유저 id 역시 place_vec 상의 id 이므로 real id로 바꿔준다.\n",
    "    real_simi_user_id_list = place_vec_reset_index.loc[place_vec_reset_index.index.isin(similar_indexes), 'user_id'].tolist()\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    # 비슷한 user들 이름을 뽑아 리스트에 저장한다\n",
    "    simi_user_name_list = user_df.loc[user['id'].isin(real_simi_user_id_list), 'name']\n",
    "    \n",
    "    \n",
    "    \n",
    "    d = {'simi_user_name' : simi_user_name_list,\n",
    "         'simi_user_id' : real_simi_user_id_list,\n",
    "         'simi_user_pick_place_id' : [place_df.loc[place_df['id'].isin(rel_df.loc[rel_df['user_id'] == u_id, 'place_id']), 'id'].tolist() for u_id in real_simi_user_id_list],\n",
    "         'simi_user_pick_place_len' : [len(place_df.loc[place_df['id'].isin(rel_df.loc[rel_df['user_id'] == u_id, 'place_id']), 'id'].tolist()) for u_id in real_simi_user_id_list],\n",
    "         'common_place_id' : [list(set(place.loc[place['id'].isin(rel.loc[rel['user_id'] == real_user_id, 'place_id']), 'id'].tolist()).intersection(place.loc[place['id'].isin(rel.loc[rel['user_id'] == u_id, 'place_id']), 'id'].tolist())) for u_id in real_simi_user_id_list],\n",
    "         'common_place_len' : [len(list(set(place.loc[place['id'].isin(rel.loc[rel['user_id'] == real_user_id, 'place_id']), 'id'].tolist()).intersection(place.loc[place['id'].isin(rel.loc[rel['user_id'] == u_id, 'place_id']), 'id'].tolist()))) for u_id in real_simi_user_id_list]\n",
    "        }\n",
    "    \n",
    "    \n",
    "     \n",
    "    result_df = pd.DataFrame(data=d, columns = [\"simi_user_name\", \"simi_user_id\", \"simi_user_pick_place_id\", \"simi_user_pick_place_len\", \"common_place_id\", \"common_place_len\"]).set_index('simi_user_id')\n",
    "    result_df = result_df.sort_values(by='common_place_len', ascending=False)\n",
    "    \n",
    "    return result_df.drop('common_place_len', axis=1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>simi_user_name</th>\n",
       "      <th>simi_user_pick_place_id</th>\n",
       "      <th>simi_user_pick_place_len</th>\n",
       "      <th>common_place_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>simi_user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>재스민</td>\n",
       "      <td>[45, 60, 72, 76, 81, 113, 116, 188, 193, 198, ...</td>\n",
       "      <td>89</td>\n",
       "      <td>[1325, 60, 45, 76]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407</th>\n",
       "      <td>뺙</td>\n",
       "      <td>[43, 44, 45, 56, 60, 74, 120, 161, 193, 194, 2...</td>\n",
       "      <td>54</td>\n",
       "      <td>[161, 43, 60, 45]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>778</th>\n",
       "      <td>또우기</td>\n",
       "      <td>[46, 64, 132, 181, 198, 223, 225, 271, 355, 38...</td>\n",
       "      <td>73</td>\n",
       "      <td>[2629, 46, 959]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>초안</td>\n",
       "      <td>[43, 50, 52, 53, 54, 55, 56, 78, 85, 169, 170,...</td>\n",
       "      <td>34</td>\n",
       "      <td>[43, 78]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>김옥빈</td>\n",
       "      <td>[45, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]</td>\n",
       "      <td>11</td>\n",
       "      <td>[45]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1523</th>\n",
       "      <td>밀카쿠키</td>\n",
       "      <td>[78, 184, 515, 680, 1746, 4367, 4370, 4371, 4372]</td>\n",
       "      <td>9</td>\n",
       "      <td>[78]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             simi_user_name  \\\n",
       "simi_user_id                  \n",
       "126                     재스민   \n",
       "407                       뺙   \n",
       "778                     또우기   \n",
       "56                       초안   \n",
       "40                      김옥빈   \n",
       "1523                   밀카쿠키   \n",
       "\n",
       "                                        simi_user_pick_place_id  \\\n",
       "simi_user_id                                                      \n",
       "126           [45, 60, 72, 76, 81, 113, 116, 188, 193, 198, ...   \n",
       "407           [43, 44, 45, 56, 60, 74, 120, 161, 193, 194, 2...   \n",
       "778           [46, 64, 132, 181, 198, 223, 225, 271, 355, 38...   \n",
       "56            [43, 50, 52, 53, 54, 55, 56, 78, 85, 169, 170,...   \n",
       "40               [45, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]   \n",
       "1523          [78, 184, 515, 680, 1746, 4367, 4370, 4371, 4372]   \n",
       "\n",
       "              simi_user_pick_place_len     common_place_id  \n",
       "simi_user_id                                                \n",
       "126                                 89  [1325, 60, 45, 76]  \n",
       "407                                 54   [161, 43, 60, 45]  \n",
       "778                                 73     [2629, 46, 959]  \n",
       "56                                  34            [43, 78]  \n",
       "40                                  11                [45]  \n",
       "1523                                 9                [78]  "
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "find_simi_user_final(rel, place, user, place_vec, place_taste_sorted_ind, '테드', 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
